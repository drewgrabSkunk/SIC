{
    "contents" : "\n\n\nresource.pool <- 1000000\ngain.rate <- 1.057\n\nresource.fun <- function(pool.resource) {\n  resources.needed <- rnorm(1, (pool.resource/250), (pool.resource/2400)/50)\n  return(resources.needed)\n  }\n\njob.resource.frame <- data.frame(matrix(data=0,nrow=2600, ncol=3))\ncolnames(job.resource.frame) <- c(\"state.index\", \"resources.allocated\", \"latency\")\n\njobs.online <- 0\njobs.resources <- 0\njobs.skipped <- 0\njobs.total <- 0\njobs.current <- 0\nresources.used <- 0\nresources.unused <- vector()\n\nfor (i in 1:365) {\n  resources.gained <- 0\n  jobs.new <- rpois(1, (2400/365))\n  jobs.total <- jobs.total + jobs.new\n  new.indices <- (1:jobs.new) + jobs.current\n\n  \n  for (j in new.indices[1]:(length(new.indices)+new.indices[1])) {\n    job.resource.frame$state.index[j] <- i\n    if(i==1) {\n      job.resource.frame$resources.allocated[j] <- resource.fun(resource.pool)\n      latency.rand <- runif(1)\n      job.resource.frame$latency[j] <- latency.dist[which(abs(latency.dist$prob - latency.rand) == min(abs(latency.dist$prob - latency.rand))),1]\n    }\n    else if((i>1) & (resources.unused[i-1] > 0)){\n      job.resource.frame$resources.allocated[j] <- resource.fun(resource.pool)\n      latency.rand <- runif(1)\n      job.resource.frame$latency[j] <- latency.dist[which(abs(latency.dist$prob - latency.rand) == min(abs(latency.dist$prob - latency.rand))),1]\n    }\n    else {\n      job.resource.frame$resources.allocated[j] <- 0\n      job.resource.frame$latency[j] <- 0\n      }\n  }\n  \n  \n  for (k in 1:jobs.total) {\n    if((job.resource.frame$resources.allocated[k] > 0) & ((job.resource.frame$latency[k] + job.resource.frame$state.index[k]) == i)) {\n      resources.gained <- (job.resource.frame$resources.allocated[k] * gain.rate)\n      job.resource.frame$resources.allocated[k] <- 0\n    }\n  }\n  \n  resources.gained <- resources.gained - sum(job.resource.frame$resources.allocated[new.indices])\n  resources.used <- sum(job.resource.frame$resources.allocated)\n  resource.pool <- resource.pool + resources.gained\n  resources.unused[i] <- resource.pool\n  if(resource.pool <= 0) {jobs.skipped <- jobs.skipped + jobs.new}\n  jobs.current <- length(new.indices) + jobs.current\n}\n\nALPHA.error <- jobs.skipped\nBETA.error <- sum(resources.unused)/365\nUNIFORMITY <- sd(job.resource.frame$resources.allocated[which(job.resource.frame$resources.allocated > 0)])\n\nprint(matrix(c(\"ALPHA.error\", \"BETA.error\", \"UNIFORMITY\",ALPHA.error, BETA.error, UNIFORMITY),nrow=3))",
    "created" : 1445288935430.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1588308185",
    "id" : "9DD3E554",
    "lastKnownWriteTime" : 1445369502,
    "path" : "//fileserver/Company/DA&DS/R Information/Drew R Playground/jobs.resources.R",
    "project_path" : "jobs.resources.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : true,
    "type" : "r_source"
}